---
resources:
  - name: pcfdemo
    type: git
    source:
      uri: ((github-uri))
      branch: ((github-branch))

  - name: version
    type: semver
    source:
      bucket: ((s3-bucket-version))
      initial_version: 1.0.0-rc.0
      key: current-version
      access_key_id: ((s3-access-key-id))
      secret_access_key: ((s3-secret-access-key))
      endpoint: ((s3-endpoint))
      region_name: ((s3-region))


  - name: candidate-release
    type: s3
    source:
      bucket: ((s3-bucket-release-candidates))
      regexp: pcf-demo-(.*).war
      access_key_id: ((s3-access-key-id))
      secret_access_key: ((s3-secret-access-key))
      endpoint: ((s3-endpoint))
      region_name: ((s3-region))

  - name: final-release
    type: s3
    source:
      bucket: ((s3-bucket-releases))
      regexp: pcf-demo-(.*).war
      access_key_id: ((s3-access-key-id))
      secret_access_key: ((s3-secret-access-key))
      endpoint: ((s3-endpoint))
      region_name: ((s3-region))

  - name: cf
    type: cf
    source:
      api: ((cf-api))
      username: ((cf-username))
      password: ((cf-password))
      organization: ((cf-org))
      space: ((cf-space))
      skip_cert_check: true

  - name: cf-prod-aws
    type: cf
    source:
      api: ((cf-api-aws))
      username: ((cf-username-aws))
      password: ((cf-password-aws))
      organization: ((cf-org-aws))
      space: ((cf-space-aws))
      skip_cert_check: true

  - name: cf-prod-gcp
    type: cf
    source:
      api: ((cf-api-gcp))
      username: ((cf-username-gcp))
      password: ((cf-password-gcp))
      organization: ((cf-org-gcp))
      space: ((cf-space-gcp))
      skip_cert_check: true

  - name: cf-prod-vmware
    type: cf
    source:
      api: ((cf-api-vmware))
      username: ((cf-username-vmware))
      password: ((cf-password-vmware))
      organization: ((cf-org-vmware))
      space: ((cf-space-vmware))
      skip_cert_check: true

jobs:
  - name: unit-test
    public: true
    plan:
      - get: pcfdemo
        trigger: true
      - task: unit
        file: pcfdemo/ci/tasks/unit.yml

  - name: build-artifact
    serial_groups: [ version ]
    plan:
      - get: pcfdemo
        passed: [ unit-test ]
        trigger: true
      - get: version
        params: { pre: rc }
      - task: build
        file: pcfdemo/ci/tasks/build.yml
      - put: candidate-release
        params: { file: build/pcf-demo-*.war }
      - put: version
        params: { file: version/number }

  - name: integration-test
    serial: true
    plan:
      - get: candidate-release
        trigger: true
        passed: [ build-artifact ]
      - get: pcfdemo
        passed: [ build-artifact ]
      - get: version
        passed: [ build-artifact ]
      - task: prepare-integration
        file: pcfdemo/ci/tasks/prepare-integration.yml
        params:
          CF_MANIFEST_HOST: ((cf-manifest-host))
      - put: cf
        params:
          manifest: prepare-integration/manifest.yml
      - task: integration
        file: pcfdemo/ci/tasks/integration.yml

  - name: ship-it
    serial_groups: [ version ]
    plan:
      - get: candidate-release
        passed: [ integration-test ]
      - get: pcfdemo
        passed: [ integration-test ]
      - get: version
        params: { bump: final }
      - task: prepare-final
        file: pcfdemo/ci/tasks/prepare-final.yml
      - put: final-release
        params: { file: prepare-final/pcf-demo-*.war }
      - put: version
        params: { file: version/number }

  - name: prepare-aws
    serial: true
    plan:
      - get: candidate-release
        passed: [ ship-it ]
      - get: pcfdemo
        passed: [ ship-it ]
        trigger: true
      - get: version
        passed: [ship-it]
      - task: prepare-aws
        file: pcfdemo/ci/tasks/prepare-aws.yml
        params:
          CF_MANIFEST_HOST_AWS: ((cf-manifest-host-prod-aws))
      - put: cf-prod-aws
        params:
          manifest: prepare-aws/aws/manifest.yml

  - name: prepare-gcp
    serial: true
    plan:
      - get: candidate-release
        passed: [ ship-it ]
      - get: pcfdemo
        passed: [ ship-it ]
        trigger: true
      - get: version
        passed: [ship-it]
      - task: prepare-gcp
        file: pcfdemo/ci/tasks/prepare-gcp.yml
        params:
          CF_MANIFEST_HOST_GCP: ((cf-manifest-host-prod-gcp))
      - put: cf-prod-gcp
        params:
          manifest: prepare-gcp/gcp/manifest.yml

  - name: prepare-vmware
    serial: true
    plan:
      - get: candidate-release
        passed: [ ship-it ]
      - get: pcfdemo
        passed: [ ship-it ]
        trigger: true
      - get: version
        passed: [ship-it]
      - task: prepare-vmware
        file: pcfdemo/ci/tasks/prepare-vmware.yml
        params:
          CF_MANIFEST_HOST_VMWARE: ((cf-manifest-host-prod-vmware))
      - put: cf-prod-vmware
        params:
          manifest: prepare-vmware/vmware/manifest.yml

  - name: major
    serial_groups: [ version ]
    plan:
      - put: version
        params: { bump: major, pre: rc }

  - name: minor
    serial_groups: [ version ]
    plan:
      - put: version
        params: { bump: minor, pre: rc }

  - name: patch
    serial_groups: [ version ]
    plan:
      - get: version
        passed: [ prepare-aws, prepare-gcp, prepare-vmware ]
        trigger: true
      - put: version
        params: { bump: patch, pre: rc }
